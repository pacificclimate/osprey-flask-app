# Configuration
APP_ROOT := $(abspath $(lastword $(MAKEFILE_LIST))/..)
APP_NAME := osprey-flask-app

# Notebook targets
LOCAL_URL = http://localhost:5000
DEV_PORT ?= $(shell bash -c 'read -ep "Target port: " port; echo $$port')

# end of configuration

.PHONY: all
all: develop run test-all clean-test

.PHONY: help
help:
	@echo "Please use 'make <target>' where <target> is one of:"
	@echo "  help              to print this help message. (Default)"
	@echo "  install           to install app by running 'pip install -e .'"
	@echo "  develop           to install with additional development requirements and put the app in development mode."
	@echo "  run               to initialize the environment variable for running the app."
	@echo "  clean             to remove all files generated by build and tests."
	@echo "\nTesting targets:"
	@echo "  test              to run tests (but skip long running tests)."
	@echo "  test-all          to run all tests (including long running tests)."
	@echo "  lint              to run code style checks with flake8."
	@echo "\nSphinx targets:"
	@echo "  docs              to generate HTML documentation with Sphinx."
	@echo "\nDeployment targets:"
	@echo "  dist              to build source and wheel package."
	
## Build targets

.PHONY: install
install:
	@echo "Installing application ..."
	@-bash -c 'pipenv install'

.PHONY: develop
develop:
	@echo "Installing development requirements for tests and docs ..."
	@-bash -c 'pipenv install --dev'
	@export FLASK_ENV=development

.PHONY: run
run:
	@echo "Initializing environment variable to run application ..."
	@export FLASK_APP=wsgi.py

.PHONY: clean
clean: clean-build clean-pyc clean-test ## remove all build, test, coverage and Python artifacts

.PHONY: clean-build
clean-build:
	@echo "Removing build artifacts ..."
	@-rm -fr build/
	@-rm -fr dist/
	@-rm -fr .eggs/
	@-find . -name '*.egg-info' -delete
	@-find . -name '*.egg' -delete
	@-find . -name '*.log' -delete
	@-find . -name '*.sqlite' -delete

.PHONY: clean-pyc
clean-pyc:
	@echo "Removing Python file artifacts ..."
	@-find . -name '*.pyc' -delete
	@-find . -name '*.pyo' -delete
	@-find . -name '*~' -delete
	@-find . -name '__pycache__' -delete

.PHONY: clean-test
clean-test:
	@echo "Removing test artifacts ..."
	@-rm -fr .pytest_cache

.PHONY: clean-dist
clean-dist: clean
	@echo "Running 'git clean' ..."
	@git diff --quiet HEAD || echo "There are uncommitted changes! Aborting 'git clean' ..."
	## do not use git clean -e/--exclude here, add them to .gitignore instead
	@-git clean -dfx

## Test targets

.PHONY: test
test:
	@echo "Running tests (skip slow and online tests) ..."
	@bash -c 'pipenv run pytest -v -m "not slow and not online" tests/'

.PHONY: test-all
test-all:
	@echo "Running all tests (including slow and online tests) ..."
	@bash -c 'pipenv run pytest -v tests/'

.PHONY: lint
lint:
	@echo "Running black code style checks ..."
	@bash -c 'pipenv run black . --check'

## Deployment targets

.PHONY: dist
dist: clean
	@echo "Building source and wheel package ..."
	@-python setup.py sdist
	@-python setup.py bdist_wheel
	@-bash -c 'ls -l dist/'
